# Random collection of links:

http://docs.services.mozilla.com/sync/index.html
http://docs.services.mozilla.com/sync/storageformat5.html
https://github.com/mozilla/firefox-ios/blob/47cc1150b327eaf94f5ec60df3071ca1e765b093/docs/sync.md

https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey

https://github.com/ferjm/gaia/commit/644adf605bc869035180dccc4b073958f075a1ef
https://github.com/mozilla/firefox-ios/blob/master/Sync/KeyBundle.swift
https://github.com/mozilla/fxa-auth-server/wiki/onepw-protocol

http://www.w3.org/TR/WebCryptoAPI/
https://github.com/mozilla/fxa-js-client/tree/master/client/lib
 
https://blog.mozilla.org/services/2014/04/30/firefox-syncs-new-security-model/
https://wiki.mozilla.org/Labs/Weave/Developer/Crypto (old version)

iOS code doing the actual HKDF: https://github.com/mozilla/firefox-ios/blob/47cc1150b327eaf94f5ec60df3071ca1e765b093/FxA/FxA/NSData%2BKeyDerivation.m#L228-L254

Android doing the actual HKDF: https://dxr.mozilla.org/mozilla-central/source/mobile/android/base/sync/crypto/HKDF.java

WebCrypto-based implementation of HKDF: https://github.com/mozilla-b2g/firefoxos-loop-client/blob/master/app/js/helpers/hawk_creds.js#L47

more code links:
https://github.com/mozilla-b2g/firefoxos-loop-client/blob/master/app/js/helpers/hawk_creds.js
https://mxr.mozilla.org/mozilla-central/source/services/crypto/modules/WeaveCrypto.js#451
https://mxr.mozilla.org/mozilla-central/source/services/sync/modules/keys.js
https://mxr.mozilla.org/mozilla-central/source/services/sync/modules/record.js
http://mxr.mozilla.org/mozilla-central/source/services/sync/tests/unit/test_httpd_sync_server.js
https://github.com/ttaubert/secret-notes/blob/master/04-secrecy/storage.js

https://github.com/mozilla-services/docs/pull/54#issuecomment-130903973

Especially relevant paragraphs from https://github.com/mozilla/fxa-auth-server/wiki/onepw-protocol:

    "kA" and "kB" enable the browser to encrypt/decrypt synchronized data  records. They will be used to derive separate encryption and HMAC keys  for each data collection (bookmarks, form-fill data, saved-password,  open-tabs, etc). This will allow the user to share some data, but not  everything, with a third party. The client may intentionally forget kA  and kB (only retaining the derived keys) to reduce the power available  to someone who steals their device.

Note that we use only kB to stretch it up with HDKF and get both the AES and the HMAC key from that (see 'how-it-works.md' doc in this same folder). We don't (currently) use kA at all.

From https://github.com/nickel-chrome/weaveclient-js/blob/master/lib/weave-crypto.js#L87:
openssl enc -d -in data -aes-256-cbc -K `cat unwrapped_symkey.16` -iv `cat iv.16`

From 
https://mxr.mozilla.org/mozilla-central/source/services/sync/modules/browserid_identity.js:
function deriveKeyBundle(kB) {
  let out = CryptoUtils.hkdf(kB, undefined,
                             "identity.mozilla.com/picl/v1/oldsync", 2*32);
  let bundle = new BulkKeyBundle();
  // [encryptionKey, hmacKey]
  bundle.keyPair = [out.slice(0, 32), out.slice(32, 64)];
  return bundle;
}
